Table,Description
actions,"Stores information about actions that can be performed within the system. Each action has a unique `id` and is identified by a `code`, which must be unique. The `description` field provides details about the action. The `status` field indicates the action's state, using an enumeration type `enum_actions_status`, with a default value of 'ACTIVE'. The table includes timestamps for creation and updates, as well as a `deleted_at` field for soft deletion management."
activities,"Tracks user activities within the system, recording details about actions taken on various objects. Each entry has a unique `id`, a reference to the `user_id` who performed the action, and an `action_id` indicating the type of action. The `object_id` identifies the specific object involved, while `object_type` categorizes that object. The `organization_id` links the activity to a specific organization. The table includes timestamps for creation and updates, as well as a `deleted_at` field for soft deletion management. The primary key is a composite key consisting of `id`, `object_id`, and `organization_id`."
certificate_base_templates,"Stores templates for certificates associated with organizations. Each template has a unique `id` and is linked to an `organization_id`. It includes fields for `code` and `name` to identify the template, as well as a `url` pointing to the template resource. The `resource_type` specifies the type of resource the template represents. The table also contains a `meta` field for additional information in JSON format. Timestamps for creation and updates are included, along with a `deleted_at` field for soft deletion management. The primary key is a composite key consisting of `id` and `organization_id`, and a unique constraint ensures that each organization can only have one template with a specific code."
comments,"Stores comments associated with various resources. Each comment is identified by a unique `id` and linked to a specific `resource_id`. The `comment` field contains the text of the comment, while `user_id` identifies the user who made the comment. The table allows for a hierarchical comment structure through the `parent_id` field, indicating the ID of the parent comment (default is 0 for top-level comments). The `status` field indicates the state of the comment, with a default of 'OPEN'. If a comment is resolved, `resolved_by` and `resolved_at` capture the user who resolved it and the timestamp of resolution, respectively. The `context` field defines the context in which the comment was made (default is 'page'). Additional flags include `is_read`, indicating whether the comment has been read, and timestamps for creation and updates. The `deleted_at` field is used for soft deletion management. The primary key is a composite key consisting of `id` and `resource_id`."
entities,"Stores entities identified by a unique `id` and associated with a specific `entity_type_id`. The `value` field holds the actual entity value, while the `label` field provides a human-readable label for the entity. The `status` field indicates the current state of the entity, defaulting to 'ACTIVE'. The `type` field can specify additional categorization of the entity. The `created_by` and `updated_by` fields track who created and last modified the entity, respectively. Timestamps for creation and updates are captured in `created_at` and `updated_at`. The `deleted_at` field supports soft deletion functionality. The primary key is a composite key of `id` and `entity_type_id`. Additionally, a unique index is created on the combination of `value` and `entity_type_id`, ensuring that the same value cannot exist for the same entity type if it hasn't been deleted."
entities_model_mapping,"Maps entity types to their corresponding models, identified by a unique `id`. The `entity_type_id` column links to specific entity types, while the `model` column specifies the associated model name. The `status` column indicates the current state of the mapping, defaulting to 'ACTIVE'. Timestamps for creation and updates are captured in `created_at` and `updated_at`, respectively. The `deleted_at` field allows for soft deletion of mappings. The primary key is a unique identifier for each mapping, and a unique index ensures that each combination of `entity_type_id` and `model` remains distinct, preventing duplicates for active mappings."
entity_types,"Defines various entity types, with each type identified by a unique `id` and linked to an organization via `organization_id`. The `value` and `label` columns provide descriptive identifiers for the entity type. The `status` column indicates the current state, defaulting to 'ACTIVE'. Additional properties such as `allow_filtering`, `data_type`, and `parent_id` provide further context. Flags like `has_entities` and `allow_custom_entities` control entity behavior, while `validations` stores any applicable validation rules in JSON format. Timestamps for creation and updates are captured in `created_at` and `updated_at`, with a `deleted_at` field for soft deletions. The primary key ensures uniqueness across different organizations, and a unique index prevents duplicate values within the same organization."
forms,"Stores form definitions identified by a unique `id` and linked to an organization through `organization_id`. The `type` and `sub_type` columns categorize the form, while the `data` column contains the form's configuration or structure in JSON format. The `version` column tracks changes, defaulting to 0 for new forms. Timestamps for creation and updates are captured in `created_at` and `updated_at`, with a `deleted_at` field for soft deletions. The primary key ensures uniqueness per organization, and a unique constraint prevents duplicate type-subtype combinations within the same organization."
modules,"Stores information about application modules identified by a unique `id`. Each module is assigned a `code` for easy reference, and its `status` indicates whether it is active or inactive, defaulting to 'ACTIVE'. Timestamps for creation and updates are tracked in `created_at` and `updated_at`, with a `deleted_at` field to facilitate soft deletions. The primary key ensures uniqueness for each module, and a unique index prevents duplicate codes from being registered."
organization_extensions,"Contains configurations for organizations, detailing how resources are managed and reviewed. Each record is identified by a unique `id` and associated with an `organization_id`. Key fields include `resource_type` to specify the type of resource being managed, and `review_required`, indicating whether a review process is necessary. `min_approval` defines the minimum number of approvals needed, while `review_type` dictates the review process structure, defaulting to 'SEQUENTIAL'. Timestamps for record creation and updates are captured in `created_at` and `updated_at`, and soft deletions are managed with the `deleted_at` field. Uniqueness is ensured for each resource type within an organization."
permissions,"Defines the access permissions for various modules within the application. Each permission is uniquely identified by an `id` and associated with a specific `code`. The `module` field indicates which module the permission pertains to, while `request_type` allows for multiple types of requests (e.g., GET, POST) that can be associated with this permission. The `api_path` field specifies the API endpoint that this permission controls access to. Permissions can have a status, defaulting to 'ACTIVE', and soft deletions are managed through the `deleted_at` field. Timestamps for creation and updates are captured in `created_at` and `updated_at`, respectively."
resource_creator_mapping,"Maps resources to their respective creators within an organization. Each entry is uniquely identified by an `id` and associates a `resource_id` with a `creator_id`, indicating which user created the resource. The `organization_id` ensures that the mapping is relevant to a specific organization. The table includes timestamps for when each mapping is created and updated, tracked in `created_at` and `updated_at`, and allows for soft deletions via the `deleted_at` field. The primary key is a composite of `id` and `creator_id`, ensuring uniqueness in mapping creators to their resources."
resources,"Stores information about various resources within an organization. Each resource is uniquely identified by an `id` and associated with an `organization_id`. The table includes attributes such as `title`, `type`, and `status`, indicating the resource's details and its current state (e.g., DRAFT). Other fields include `blob_path` for file storage, `user_id` for the creator, and `meta` for additional data in JSON format. The table tracks the creation and update timestamps through `created_at` and `updated_at`, as well as various review stages and publication details with fields like `submitted_on` and `published_on`. The primary key is a composite of `id` and `organization_id`."
review_resources,"Tracks the resources under review by specific reviewers within an organization. Each entry is uniquely identified by an `id` and associated with a `reviewer_id` and `resource_id`, linking the reviewer to the specific resource. The `organization_id` field ensures that the reviewer-resource association is contextually tied to the correct organization. The table includes timestamps for creation (`created_at`), updates (`updated_at`), and potential deletion (`deleted_at`). The primary key consists of the composite of `id` and `reviewer_id`, ensuring unique reviewer assignments to resource reviews."
review_stages,"Defines the stages involved in the review process for resources within an organization. Each stage is uniquely identified by an `id`, and it specifies the `role` responsible for the review at that stage. The `level` field indicates the order of the stage in the review process, with a default value of 1. The `resource_type` field specifies the type of resource that this review stage applies to, while `organization_id` associates the stage with a specific organization. The table includes timestamps for creation (`created_at`), updates (`updated_at`), and potential deletion (`deleted_at`). The primary key consists of a composite of `id` and `organization_id`, ensuring uniqueness for each stage within the context of an organization."
reviews,"Stores the reviews associated with resources in an organization. Each review is uniquely identified by an `id`, and it is linked to a specific `resource_id` and `reviewer_id`. The `status` field indicates the current state of the review process, with a default value of 'NOT_STARTED'. The `organization_id` associates the review with a specific organization. Timestamps for creation (`created_at`), updates (`updated_at`), and potential deletion (`deleted_at`) are also included. Additionally, the `notes` field allows for any comments or observations made by the reviewer. The primary key consists of a composite of `id` and `organization_id`, ensuring each review is unique within the context of an organization. An additional unique index prevents duplicate reviews for the same resource by the same reviewer within the organization."
role_permission_mapping,"Defines the mapping between roles and permissions within the application. Each entry specifies a `role_title`, which represents the title of the role, and a `permission_id`, which references a specific permission. The `module` field indicates the module associated with the permission, while `request_type` is an array that denotes the types of requests (e.g., GET, POST) that the permission applies to. The `api_path` specifies the API endpoint that the permission controls. Metadata fields include `created_by`, which identifies who created the entry, and timestamps for creation (`created_at`), updates (`updated_at`), and potential deletion (`deleted_at`). The primary key is a composite of `role_title` and `permission_id`, ensuring that each role-permission mapping is unique."
sequelize_meta,"Stores metadata about the migrations that have been executed in a Sequelize-managed database. Each entry consists of a `name` field, which typically corresponds to the name of the migration file. This table helps Sequelize track which migrations have been applied to the database, ensuring that each migration is only executed once. The primary key on `name` guarantees uniqueness, preventing duplicate entries for the same migration."