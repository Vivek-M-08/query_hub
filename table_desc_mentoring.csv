Table,Description
availabilities,"Tracks user availability for specific events within an organization. Each record includes an `id` as the primary key, a `user_id` to identify the user, and the `event_name` indicating the nature of the event. The `start_time` and `end_time` represent the availability window in Unix time format. Optional fields include `expiration_date` for when the availability should no longer be considered, and various fields for recurring events, such as `repeat_on`, `repeat_unit`, and `repeat_increment`. The `session_id` links to a specific session, while `updated_by` and `created_by` track who modified or created the record. The `organization_id` associates the record with an organization, and the `exceptions` field allows for special cases in JSONB format. Timestamps `created_at`, `updated_at`, and `deleted_at` manage record creation and updates."
default_rules,"Stores default rules applicable within an organization for processing requests. Each record is identified by a unique `id`. The `type` indicates the category of the rule, while `target_field` specifies which field the rule applies to. The `is_target_from_sessions_mentor` boolean flag indicates whether the target is derived from a session mentor. The `requester_field` defines the field related to the requester. The `field_configs` allows for flexible configuration of fields in JSON format. The `operator` specifies the condition for the rule. `requester_roles` is an array defining the roles that can trigger this rule, with default roles set to 'ALL'. The `requester_roles_config` provides additional configuration in JSON format, with an option to exclude roles. The `organization_id` associates the rule with a specific organization. `created_by`, `updated_by` track the user responsible for the record, while timestamps `created_at`, `updated_at`, and `deleted_at` manage record lifecycle and changes."
entities,"Stores various entities associated with specific types within an organization. Each record is uniquely identified by `id` and `entity_type_id`. The `entity_type_id` links to the type of entity represented. The `value` field holds the actual value of the entity, while `label` provides a human-readable name. The `status` indicates the current state of the entity, defaulting to 'ACTIVE'. The `type` field can provide further classification. Fields `created_by` and `updated_by` track the user who created or last modified the record, respectively. Timestamps `created_at`, `updated_at`, and `deleted_at` manage the entity's lifecycle and changes."
entity_types,"Defines various types of entities that can be created within an organization. Each record is uniquely identified by `id` and `organization_id`. The `value` field holds the internal identifier for the entity type, while `label` provides a user-friendly name. The `status` field indicates the current state, defaulting to 'ACTIVE'. Fields such as `allow_filtering` and `allow_custom_entities` specify whether certain operations are permitted. The `data_type` field indicates the expected data format for this entity type. The `parent_id` allows for hierarchical structuring of entity types. Other fields include `has_entities` to denote if the type can have associated entities, `model_names` for any related models, and a `regex` for validation. Timestamps (`created_at`, `updated_at`, `deleted_at`) track the entity type's lifecycle, and `required` indicates if this entity type must be present."
feedbacks,"Stores user feedback associated with specific sessions and questions. Each record is uniquely identified by `id` and `user_id`. The `session_id` links feedback to a particular session, while `question_id` associates it with a specific question. The `response` field captures the user's feedback, and `meta` can hold additional structured information about the feedback in JSON format. Timestamps (`created_at`, `updated_at`, `deleted_at`) track the lifecycle of the feedback entry."
file_uploads,"Stores information about files uploaded to the system. Each record is uniquely identified by `input_path` and `organization_id`. The `name` field captures the original name of the uploaded file, while `input_path` and `output_path` store the file's locations in the system. The `status` field indicates the current state of the upload (defaulting to 'UPLOADED'). The `type` field specifies the file type, and timestamps (`created_at`, `updated_at`, `deleted_at`) track the lifecycle of the file entry."
issues,"Stores information about issues reported by users in the system. Each issue is uniquely identified by `id`. The `user_id` field links the issue to the reporting user, and the `description` field contains the details of the issue. The `is_email_triggered` boolean indicates whether an email notification has been sent regarding the issue. The `meta_data` field allows for the storage of additional context or attributes related to the issue in JSON format. Timestamps (`created_at`, `updated_at`, `deleted_at`) track the lifecycle of the issue entry."
modules,"Stores information about different modules within the system. Each module is identified by a unique `id`. The `code` field holds a unique identifier for the module, while the `status` field indicates the current state of the module. The `deleted_at` timestamp is used for soft deletes, allowing modules to be marked as deleted without removing them from the database. Timestamps (`created_at`, `updated_at`) record when the module entry was created and last modified."
notification_templates,"Stores notification templates used for sending alerts or updates to users. Each template is uniquely identified by `id` and is associated with an `organization_id`. The `type` field specifies the category of the notification, while `code` serves as a unique identifier for the template. The `subject` field contains the subject line for email notifications, and the `body` field holds the main content of the notification. Additional fields such as `status`, `email_header`, and `email_footer` allow for customization of the notification. Timestamps (`created_at`, `updated_at`) track the creation and last modification dates of each template, and `deleted_at` allows for soft deletion."
organization_extension,"Contains extension information related to organizations, including various visibility policies for sessions and mentors. The `organization_id` uniquely identifies each organization. Fields such as `session_visibility_policy` and `mentor_visibility_policy` specify how sessions and mentors are visible to users, while `approval_required_for` indicates which roles require approval. The `allow_mentor_override` boolean field specifies if mentors can override certain settings. Timestamps (`created_at`, `updated_at`) record the creation and last modification dates of the entry, and `deleted_at` allows for soft deletion. Feedback question sets for mentees and mentors are stored in `mentee_feedback_question_set` and `mentor_feedback_question_set`, respectively. The table also supports JSONB uploads for flexible data storage."
organizations,"Stores information about organizations, including their name, code, description, and status. Each organization is uniquely identified by the `id`. The `org_admin` field holds an array of integers representing organization administrators, while `parent_id` links to a parent organization if applicable. The `related_orgs` field contains an array of integers representing related organizations. The `in_domain_visibility` field determines how the organization is visible within its domain. Timestamps (`created_at`, `updated_at`) track when the organization entry was created and last modified, and `deleted_at` is used for soft deletion."
permissions,"Stores permission details for various modules within the application. Each permission is uniquely identified by the `id`. The `code` field provides a unique identifier for the permission, while `module` indicates the specific module to which the permission pertains. The `request_type` field is an array that defines the types of requests associated with this permission. The `api_path` specifies the corresponding API endpoint, and the `status` indicates the current status of the permission (e.g., active or inactive). Timestamps (`created_at`, `updated_at`) are used to track when the permission entry was created and last modified, and `deleted_at` is utilized for soft deletion."
post_session_details,"Stores detailed information related to post-session activities. Each entry is uniquely identified by the `id`. The `session_id` field references the associated session, while the `recording` field contains JSON data related to the session's recording. The `recording_url` field provides a URL link to access the recorded session. The `meta` field allows for additional metadata in JSON format. Timestamps (`created_at`, `updated_at`) are used to track when the entry was created and last modified, and `deleted_at` is used for soft deletion."
question_sets,"Stores collections of questions, uniquely identified by the `code`. The `questions` field is an array of character varying types, allowing multiple questions to be associated with each set. The `status` field indicates the current state of the question set. The `meta` field allows for additional information in JSON format. Timestamps (`created_at`, `updated_at`) track the creation and modification times, while `deleted_at` supports soft deletion. Additionally, `created_by` and `updated_by` fields keep track of the user responsible for creating or updating the question set."
questions,"Holds individual questions with associated metadata. Each question has a unique `id`, a `name`, and the actual text of the question in the `question` field. The `options` field allows for an array of possible answers, catering to various question types indicated by the `type` field. Additional attributes include `no_of_stars` for rating questions, `status` to denote the question's current state, and `category` for organizational purposes, stored as JSON. The `rendering_data` field can store specifics on how the question should be presented. The `meta` field allows for extra information in JSON format. Creation and modification timestamps (`created_at`, `updated_at`) are tracked, while `deleted_at` supports soft deletion. User identifiers for the creator and last updater are stored in `created_by` and `updated_by`."
role_permission_mapping,"Maps roles to specific permissions within a system. Each entry consists of a unique combination of `role_title` and `permission_id`, ensuring that a role can be associated with multiple permissions. The `module` field specifies the application module related to the permission. The `request_type` field contains an array of HTTP request methods (e.g., GET, POST) that the permission applies to. The `api_path` field indicates the endpoint associated with the permission. Timestamps for creation and updates are tracked in `created_at` and `updated_at`, while `created_by` identifies the user who created the mapping."
sequelize_meta,"Stores metadata for Sequelize migrations. Each entry consists of a `name` that represents the name of a migration file that has been executed. This table helps Sequelize keep track of which migrations have been applied to the database, ensuring that migrations are executed in the correct order and preventing duplicate execution."
session_attendees,"Tracks attendees of sessions, specifically mentees. Each record includes an `id`, `mentee_id` representing the attendee, `session_id` for the associated session, `time_zone` indicating the mentee's time zone, timestamps for when they joined and left the session, a flag for whether feedback was skipped, and any relevant meeting information in JSON format. The `type` column defaults to 'ENROLLED', indicating the attendee's status."
session_enrollments,"Records the enrollment of mentees in specific sessions. Each entry consists of an `id`, `mentee_id` identifying the enrolled mentee, `session_id` linking to the session, and timestamps for when the enrollment was created and last updated. A `deleted_at` column is included for soft deletion of records. The primary key is a composite of `mentee_id` and `session_id`, ensuring uniqueness for each enrollment."
session_ownerships,"Tracks the ownership of sessions by users, allowing for different roles (e.g., mentor, mentee). Each entry consists of an `id`, `user_id` identifying the owner, `session_id` linking to the session, and timestamps for creation and updates. The `deleted_at` column is available for soft deletion. The primary key is a composite of `user_id`, `session_id`, and `type`, ensuring uniqueness for each ownership record."
sessions,"Stores information about sessions offered by mentors. Each session includes an `id`, `title`, `description`, and various attributes like `recommended_for`, `categories`, `medium`, and `image`. It also includes IDs for `mentor`, `mentor_organization`, and details about the session's timing (`start_date`, `end_date`, `started_at`, `completed_at`). Other attributes track session status, passwords for mentees and mentors, feedback question sets, and meeting information. The `visibility` column determines how sessions are shared, while the primary key is the `id`."
user_extensions,"Stores extended information about users, including their `designation`, `area_of_expertise`, `education_qualification`, and `experience`. The `rating`, `meta`, and `stats` columns hold various JSON data related to user performance and attributes. Visibility settings for the mentor (`mentor_visibility`), external sessions (`external_session_visibility`), and external mentors (`external_mentor_visibility`) are also included. The table tracks user contact details (`name`, `email`, `phone`) and allows for tagging with custom entities. The primary key is `user_id`."
user_roles,"Defines the roles assigned to users within the system. Each role has a unique `title`, an associated `user_type`, and a `status` indicating if the role is currently active. The table tracks the creation and last update timestamps (`created_at`, `updated_at`) and allows for soft deletion with the `deleted_at` field. The primary key is `id`, and the `title` field is unique across all roles."
users,"Stores user information within the system, including `name`, `email`, and `password`. Each user has a unique `id` associated with an `organization_id`, which is linked to the `organizations` table. The `roles` field is an array of integers representing assigned roles. Additional fields include `status`, `email_verified`, and user profile details such as `gender`, `about`, `location`, and `languages`. The table tracks timestamps for user creation and updates, and also records the `last_logged_in_at` time. Soft deletion is managed through the `deleted_at` field."